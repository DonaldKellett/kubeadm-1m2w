---
- name: Set up K8s control plane
  hosts: masters
  tasks:
  - ansible.builtin.shell: |
      echo "export PATH=\"/opt/cni/bin:/usr/local/sbin:/usr/local/bin:\$PATH\"" >> "$HOME/.bashrc"
      source "$HOME/.bashrc"
      sudo sed -i 's#Defaults    secure_path = /sbin:/bin:/usr/sbin:/usr/bin#Defaults    secure_path = /opt/cni/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin#' /etc/sudoers
      export K8S_CONTROL_PLANE="{{ hostvars['master0']['private_ip'] }}"
      echo "$K8S_CONTROL_PLANE k8s-control-plane" | sudo tee -a /etc/hosts
      sudo modprobe br_netfilter
      echo br_netfilter | sudo tee /etc/modules-load.d/kubernetes.conf
      cat << EOF | sudo tee -a /etc/sysctl.conf
      net.ipv4.ip_forward=1
      EOF
      sudo sysctl -p
  - ansible.builtin.reboot:
    become: true
  - ansible.builtin.shell: |
      wget https://github.com/containerd/containerd/releases/download/v1.7.8/containerd-1.7.8-linux-amd64.tar.gz
      sudo tar Cxzvf /usr/local containerd-1.7.8-linux-amd64.tar.gz
      sudo mkdir -p /usr/local/lib/systemd/system/
      sudo wget -qO /usr/local/lib/systemd/system/containerd.service https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
      sudo systemctl daemon-reload
      sudo systemctl enable --now containerd.service
      sudo mkdir -p /etc/containerd/
      containerd config default | \
          sed 's/SystemdCgroup = false/SystemdCgroup = true/' | \
          sed 's/pause:3.8/pause:3.9/' | \
          sudo tee /etc/containerd/config.toml
      sudo systemctl restart containerd.service
      sudo mkdir -p /usr/local/sbin/
      sudo wget -qO /usr/local/sbin/runc https://github.com/opencontainers/runc/releases/download/v1.1.10/runc.amd64
      sudo chmod +x /usr/local/sbin/runc
      sudo mkdir -p /opt/cni/bin/
      wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
      sudo tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.3.0.tgz
  - ansible.builtin.shell: |
      sudo apt update && sudo apt install -y apt-transport-https ca-certificates curl
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo apt update && sudo apt install -y \
          kubeadm=1.28.3-1.1 \
          kubelet=1.28.3-1.1 \
          kubectl=1.28.3-1.1
      sudo apt-mark hold kubelet kubeadm kubectl
      sudo systemctl enable --now kubelet.service
      cat > kubeadm-config.yaml << EOF
      kind: ClusterConfiguration
      apiVersion: kubeadm.k8s.io/v1beta3
      kubernetesVersion: v1.28.3
      controlPlaneEndpoint: "k8s-control-plane:6443"
      networking:
        podSubnet: "192.168.0.0/16"
      ---
      kind: KubeletConfiguration
      apiVersion: kubelet.config.k8s.io/v1beta1
      cgroupDriver: systemd
      EOF
      sudo kubeadm init --config kubeadm-config.yaml
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config
      echo "source <(kubectl completion bash)" >> "$HOME/.bashrc" && \
          source "$HOME/.bashrc"
      wget -qO - https://raw.githubusercontent.com/projectcalico/calico/v3.26.3/manifests/calico.yaml | \
          kubectl apply -f -
  - ansible.builtin.shell: |
      kubectl wait --for=condition=Ready node master0
